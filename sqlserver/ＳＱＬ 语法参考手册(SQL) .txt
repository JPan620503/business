ＳＱＬ 语法参考手册(SQL) 
 
chd发言于：00-8-19 9:31:30   

DB2 提供了关连式资料库的查询语言 ＳＱＬ (Structured Query Language)，是一种非常口语化、既易学又易懂的语法。此一语言几乎是每个资料库系统都必须提供的，用以表示关连式的操作，包含了资料的定义（ＤＤＬ）以及资料的处理（ＤＭＬ）。SQL原来拼成SEQUEL，这语言的原型以“系统 R“的名字在 IBM 圣荷西实验室完成，经过IBM内部及其他的许多使用性及效率测试，其结果相当令人满意，并决定在系统R 的技术基础发展出来 IBM 的产品。而且美国国家标准学会（ANSI）及国际标准化组织（ISO）在1987遵循一个几乎是以 IBM SQL 为基础的标准关连式资料语言定义。

一、资料定义 ＤＤＬ（Data Definition Language) 
资料定语言是指对资料的格式和形态下定义的语言，他是每个资料库要建立时候时首先要面对的，举凡资料分哪些表格关系、表格内的有什麽栏位主键、表格和表格之间互相参考的关系等等，都是在开始的时候所必须规划好的。

１、建表格：
CREATE TABLE table_name( 
column1 DATATYPE [NOT NULL] [NOT NULL PRIMARY KEY], 
column2 DATATYPE [NOT NULL],
...）
说明：　
DATATYPE --是资料的格式，详见表。
NUT NULL --可不可以允许资料有空的（尚未有资料填入）。
PRIMARY KEY --是本表的主键。

２、更改表格　
ALTER TABLE table_name 
ADD COLUMN column_name DATATYPE 
说明：增加一个栏位（没有删除某个栏位的语法。
ALTER TABLE table_name
ADD PRIMARY KEY (column_name)
说明：更改表得的定义把某个栏位设为主键。
ALTER TABLE table_name
DROP PRIMARY KEY (column_name)
说明：把主键的定义删除。

３、建立索引　
CREATE INDEX index_name ON table_name (column_name)
说明：对某个表格的栏位建立索引以增加查询时的速度。

４、删除　
DROP table_name
DROP index_name

二、的资料形态 DATATYPEs
smallint
16 位元的整数。
interger
32 位元的整数。
decimal(p,s)
p 精确值和 s 大小的十进位整数，精确值p是指全部有几个数(digits)大小值，s是指小数
点後有几位数。如果没有特别指定，则系统会设为 p=5; s=0 。 
float
32位元的实数。
double
64位元的实数。
char(n)
n 长度的字串，n不能超过 254。
varchar(n)
长度不固定且其最大长度为 n 的字串，n不能超过 4000。
graphic(n)
和 char(n) 一样，不过其单位是两个字元 double-bytes， n不能超过127。这个形态是为
了支援两个字元长度的字体，例如中文字。
vargraphic(n)
可变长度且其最大长度为 n 的双字元字串，n不能超过 2000。
date
包含了 年份、月份、日期。
time
包含了 小时、分钟、秒。
timestamp
包含了 年、月、日、时、分、秒、千分之一秒。

三、资料操作 ＤＭＬ （Data Manipulation Language)
资料定义好之後接下来的就是资料的操作。资料的操作不外乎增加资料（insert)、查询资料（query）、更改资料（update) 、删除资料（delete）四种模式，以下分 别介绍他们的语法：

１、增加资料：
INSERT INTO table_name (column1,column2,...)
VALUES ( value1,value2, ...)
说明：
1.若没有指定column 系统则会按表格内的栏位顺序填入资料。
2.栏位的资料形态和所填入的资料必须吻合。
3.table_name 也可以是景观 view_name。

INSERT INTO table_name (column1,column2,...)
SELECT columnx,columny,... FROM another_table
说明：也可以经过一个子查询（subquery）把别的表格的资料填入。

２、查询资料：
基本查询
SELECT column1,columns2,...
FROM table_name
说明：把table_name 的特定栏位资料全部列出来
SELECT *
FROM table_name
WHERE column1 = xxx 
[AND column2 > yyy] [OR column3 <> zzz]
说明：
1.'*'表示全部的栏位都列出来。
2.WHERE 之後是接条件式，把符合条件的资料列出来。

SELECT column1,column2
FROM table_name
ORDER BY column2 [DESC]
说明：ORDER BY 是指定以某个栏位做排序，[DESC]是指从大到小排列，若没有指明，则是从小到大
排列

组合查询
组合查询是指所查询得资料来源并不只有单一的表格，而是联合一个以上的
表格才能够得到结果的。
SELECT *
FROM table1,table2
WHERE table1.colum1=table2.column1
说明：
1.查询两个表格中其中 column1 值相同的资料。
2.当然两个表格相互比较的栏位，其资料形态必须相同。
3.一个复杂的查询其动用到的表格可能会很多个。

整合性的查询：
SELECT COUNT (*) 
FROM table_name
WHERE column_name = xxx
说明：
查询符合条件的资料共有几笔。
SELECT SUM(column1)
FROM table_name
说明：
1.计算出总和，所选的栏位必须是可数的数字形态。
2.除此以外还有 AVG() 是计算平均、MAX()、MIN()计算最大最小值的整合性查询。
SELECT column1,AVG(column2)
FROM table_name
GROUP BY column1
HAVING AVG(column2) > xxx
说明：
1.GROUP BY: 以column1 为一组计算 column2 的平均值必须和 AVG、SUM等整合性查询的关键字
一起使用。 
2.HAVING : 必须和 GROUP BY 一起使用作为整合性的限制。

复合性的查询
SELECT *
FROM table_name1
WHERE EXISTS (
SELECT *
FROM table_name2
WHERE conditions )
说明：
1.WHERE 的 conditions 可以是另外一个的 query。
2.EXISTS 在此是指存在与否。
SELECT *
FROM table_name1
WHERE column1 IN (
SELECT column1 
FROM table_name2
WHERE conditions )
说明：　
1. IN 後面接的是一个集合，表示column1 存在集合里面。
2. SELECT 出来的资料形态必须符合 column1。 

其他查询
SELECT *
FROM table_name1
WHERE column1 LIKE 'x%' 
说明：LIKE 必须和後面的'x%' 相呼应表示以 x为开头的字串。
SELECT *
FROM table_name1
WHERE column1 IN ('xxx','yyy',..)
说明：IN 後面接的是一个集合，表示column1 存在集合里面。
SELECT *
FROM table_name1
WHERE column1 BETWEEN xx AND yy
说明：BETWEEN 表示 column1 的值介於 xx 和 yy 之间。 

３、更改资料：
UPDATE table_name
SET column1='xxx'
WHERE conditoins
说明：
1.更改某个栏位设定其值为'xxx'。
2.conditions 是所要符合的条件、若没有 WHERE 则整个 table 的那个栏位都会全部被更改。

４、删除资料：
DELETE FROM table_name
WHERE conditions
说明：删除符合条件的资料。

说明：关于WHERE条件后面如果包含有日期的比较，不同数据库有不同的表达式。具体如下：
(1)如果是ACCESS数据库，则为：WHERE mydate>#2000-01-01# 
(2)如果是ORACLE数据库，则为：WHERE mydate>cast('2000-01-01' as date)
或：WHERE mydate>to_date('2000-01-01','yyyy-mm-dd')
在Delphi中写成：
thedate='2000-01-01';
query1.SQL.add('select * from abc where mydate>cast('+''''+thedate+''''+' as date)'); 

如果比较日期时间型，则为：
WHERE mydatetime>to_date('2000-01-01 10:00:01','yyyy-mm-dd hh24:mi:ss') 

 
 
 

