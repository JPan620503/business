1.开通分布式查询权限

exec sp_configure 'show advanced options',1 
reconfigure 

exec sp_configure 'Ad Hoc Distributed Queries',1 
reconfigure 

2.查询

select a.ProjCode as '楼盘编号',b.projname as '楼盘名称',count(1) as '房源量' from 
 openrowset( 'SQLOLEDB ', 'IP地址（服务器名）'; '用户名'; '密码',[数据库名].[dbo].[表名]) a
 , openrowset( 'SQLOLEDB ', 'IP地址（服务器名）'; '用户名'; '密码',[数据库名].[dbo].[表名]) b
 where a.ProjCode=b.newcode GROUP by   a.ProjCode ,b.projname order by  count(1) desc

 

3.然后换城市，只需要改IP、 库名和表名了。

4.关闭



linkserver
使用联结服务器:   
  EXEC   sp_addlinkedserver   '别名','','MSDASQL',NULL,NULL,'DRIVER={SQL   Server};SERVER=远程名;UID=用户;PWD=密码;'   
  exec   sp_addlinkedsrvlogin     @rmtsrvname='别名',@useself='false',@locallogin='sa',@rmtuser='sa',@rmtpassword='密码'   
  GO   
  然后你就可以如下：   
  select   *   from   别名.库名.dbo.表名   
  insert   库名.dbo.表名   select   *   from   别名.库名.dbo.表名   
  select   *   into   库名.dbo.新表名   from   别名.库名.dbo.表名   
  go





--------示例-----------------------------------------------
exec sp_configure 'show advanced options',1
reconfigure
exec sp_configure 'Ad Hoc Distributed Queries',1
reconfigure

select   *   from   OPENDATASOURCE('SQLOLEDB', 'Data Source=远程ip;User ID=sa;Password=密码').库名.dbo.表名
select a.* from   OPENDATASOURCE('SQLOLEDB', 'Data Source=远程ip;User ID=sa;Password=密码').库名.dbo.表名 a,OPENDATASOURCE('SQLOLEDB', 'Data Source=远程ip;User ID=sa;Password=密码').库名.dbo.表名 b

exec sp_configure 'Ad Hoc Distributed Queries',0
reconfigure

exec sp_configure 'show advanced options',0
reconfigure

---------------------------------------------------------



-------------从数据库上一个表通过事务拷贝到另一个数据库中的表---------------------------------------------
public int ExportOrderIn()
        {
            int result = 0;

            DataTable dtDetail = base.ExecuteTable(SQL_SELECT_ORDER_IN_DETAIL_NOVA, null);
            if (dtDetail.Rows.Count > 0)
            {
                string condition = StringHelper.Join(dtDetail, "v01", SEPARATOR);

                using (SqlConnection wmsConn = new SqlConnection(DBConfig.connectionString))
                {
                    wmsConn.Open();
                    using (SqlTransaction wmsTran = wmsConn.BeginTransaction())
                    {
                        try
                        {
                            //DbHelper.ExecuteNonQuery(wmsTran, CommandType.Text, SQL_ORDER_IN_NOVA_STATE_EXPORTED, null);

                            using (SqlConnection ifConn = new SqlConnection(DBConfig.InterConnectionString))
                            {
                                ifConn.Open();
                                using (SqlTransaction ifTran = ifConn.BeginTransaction())
                                {
                                    try
                                    {

                                        SqlBulkCopy bulkCopyOrders = new SqlBulkCopy(ifConn, SqlBulkCopyOptions.Default, ifTran);
                                        #region 导出明细
                                        bulkCopyOrders.DestinationTableName = "Order_in_Detail_NOVA";

                                        bulkCopyOrders.ColumnMappings.Add("v01", "orderDetailID");
                                        bulkCopyOrders.ColumnMappings.Add("v02", "orderHeadID");
                                        bulkCopyOrders.ColumnMappings.Add("i04", "ordNum");
                                        bulkCopyOrders.ColumnMappings.Add("v05", "item_ID");
                                        bulkCopyOrders.ColumnMappings.Add("v06", "item_code");
                                        bulkCopyOrders.ColumnMappings.Add("d11", "ordDate");
                                        bulkCopyOrders.ColumnMappings.Add("state", "state");
                                        bulkCopyOrders.ColumnMappings.Add("v13", "lot");
                                        bulkCopyOrders.ColumnMappings.Add("d14", "lot_expiration");
                                        bulkCopyOrders.ColumnMappings.Add("d35", "workDate");
                                        bulkCopyOrders.ColumnMappings.Add("v36", "site");
                                        bulkCopyOrders.ColumnMappings.Add("i17", "number");
                                        bulkCopyOrders.ColumnMappings.Add("i38", "workOrder");
                                        bulkCopyOrders.ColumnMappings.Add("v08", "Defective");
                                        bulkCopyOrders.ColumnMappings.Add("Manufacture", "Manufacture");

                                        bulkCopyOrders.BulkCopyTimeout = 1000;

                                        bulkCopyOrders.WriteToServer(dtDetail);
                                        #endregion

                                        bulkCopyOrders = new SqlBulkCopy(ifConn, SqlBulkCopyOptions.Default, ifTran);

                                        //logsInfo = new LogsInfo("导入导出接口", "导出供应商入库单", string.Format("导出成功，导出明细：{0}", dtDetail.Rows.Count));


                                        logsInfo = new LogsInfo("导入导出接口", "导出供应商入库单", string.Format("供应商入库单导出成功，导出明细序号列表：{0}，明细：{1}", condition, dtDetail.Rows.Count));
                                        logs.Add(wmsTran, logsInfo);

                                        DbHelper.ExecuteNonQuery(wmsTran, CommandType.Text, string.Format(SQL_ORDER_IN_NOVA_STATE_EXPORTED, condition), null);


                                        ifTran.Commit();
                                        wmsTran.Commit();

                                    }
                                    catch (Exception ex)
                                    {
                                        wmsTran.Rollback();
                                        ifTran.Rollback();

                                        //logsInfo = new LogsInfo("导入导出接口", "导出供应商入库", string.Format("导入失败，失败原因：{0}", ex.Message));
                                        logsInfo = new LogsInfo("导入导出接口", "导出供应商入库单", string.Format("供应商入库单导出失败，失败原因：{0}", ex.Message));
                                        logs.Add(logsInfo);

                                        return -1;
                                    }
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            wmsTran.Rollback();

                            logsInfo = new LogsInfo("导入导出接口", "导出供应商入库单", string.Format("供应商入库单导出失败，失败原因：{0}", ex.Message));
                            logs.Add(logsInfo);

                            return -1;
                        }

                    }

                }
            }
            return result;


        }
---------------------------------------------------------







